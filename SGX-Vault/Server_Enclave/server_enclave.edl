enclave
{
    include "sgx_trts.h"
    include "sgx_utils.h"
    include "sgx_tcrypto.h"
    include "../include/Smash.hpp"

    from "sgx_tswitchless.edl" import *;

    /* ECALLのプロトタイプを記述 */
    trusted
    {   
        /* RAセッションの初期化を実施 */
        public sgx_status_t ecall_init_ra(uint32_t client_id,
            [out]uint32_t *ra_ctx, [out]sgx_ec256_public_t *Ga);

        /* QE3とのLA用のREPORT構造体の生成 */
        public sgx_status_t ecall_create_report(uint32_t ra_ctx,
            [in]sgx_target_info_t *qe3_target_info,
            [out]sgx_report_t *report);
        
        /* RAセッションのデストラクト */
        public sgx_status_t ecall_destroy_ra_session(uint32_t ra_ctx);

        /* 交換した公開鍵の署名を検証し共通鍵生成 */
        public sgx_status_t ecall_process_session_keys(uint32_t ra_ctx,
            uint32_t client_id, [in]sgx_ec256_public_t *Gb, 
            [in]sgx_ec256_signature_t *sigsp);

        /* 暗号化された2つの値を加算して結果を暗号化し返却 */
        public sgx_status_t ecall_sample_addition(uint32_t ra_ctx,
            [in, size=cipher1_len]uint8_t *cipher1, size_t cipher1_len,
            [in, size=cipher2_len]uint8_t *cipher2, size_t cipher2_len,
            [in, size=12]uint8_t *iv,
            [in, size=16]uint8_t *tag1, [in, size=16]uint8_t *tag2, 
            [out, size=32]uint8_t *result, [out]size_t *result_len,
            [out, size=12]uint8_t *iv_result, [out, size=16]uint8_t *tag_result);

        /* SGXVaultのために必要なECALL群 */
        public int calc_sealed_len(int message_len);
        public void do_sealing([in, size=message_len]uint8_t* message,
            int message_len, [in, out, size=sealed_len]uint8_t* sealed, 
            int sealed_len, int policy);
        public int calc_unsealed_len([in, size=sealed_len]uint8_t* sealed, int sealed_len);
        public int unsealing_and_compare([in, size=sealed_len]uint8_t* sealed,
            int sealed_len,
            [in, out, size=unsealed_len]uint8_t* unsealed,
            int unsealed_len,
            [in, size=message_len]uint8_t* message,
            int message_len,
            [out]int* error_flag);
        public sgx_status_t register_password_for_sealed_file([in, size=sealed_data_size]uint8_t *sealed_data,
                                                    int sealed_data_size,
                                                    [in, size=username_len]uint8_t *uesrname, int username_len,
                                                    [in, size=password_len]uint8_t *password, int password_len);
        public void search_and_show_password_from_sealed_file([in, size=sealed_data_len]uint8_t* sealed_data, int sealed_data_len, [in, size=username_len]uint8_t* username, int username_len);

        public test_struct_t sgx_bleed_demo();
    };

    /* OCALLのプロトタイプを記述 */
    untrusted
    {
        void ocall_print([in, string]const char *str, int log_type);

        void ocall_print_status(sgx_status_t st);

        void ocall_print_binary([in, size=sz]uint8_t *buf, size_t sz);

        void ocall_write_data([in, size=data_len]uint8_t* data, int data_len);

        void ocall_write_data_2([in, size=data_len]uint8_t* data, int data_len);
    };
};
